name: Pyramid_m1_base 
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parser: "load_general_params"
train_params:
  batch_size: &batch_size 4
  epoches: 30
  eval_freq: 2
  save_freq: 2
  max_cav: 5

comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1]


heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1"
  mapping_dict:
    m1: m1
    m2: m1
    m3: m1
    m4: m1
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar


fusion:
  core_method: 'intermediateheter'
  #中间层融合方法，通常在中间层进行特征融合。适用于处理来自不同传感器（如激光雷达、相机）或不同车辆的数据，进行联合特征提取和处理。
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder


preprocess:
#预处理
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  #该方法用于将激光雷达点云数据体素化。将点云划分成规则的网格（体素），每个体素包含若干点。这些体素特征会作为神经网络的输入。
  args:
    voxel_size: [0.4, 0.4, 4] # useful
    max_points_per_voxel: 1 # useless
    max_voxel_train: 1 # useless
    max_voxel_test: 1 # useless
  # lidar range for each individual cav.
  cav_lidar_range: *cav_lidar

# anchor box related
postprocess:
#后处理
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  #体素后处理方法。用于将网络输出的体素特征映射回实际空间，并根据预设的锚点框生成最终的检测结果。包括非极大值抑制（NMS）等步骤。
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: heter_pyramid_collab
  #多模态协作金字塔模型，利用多层特征金字塔进行目标检测和特征融合，特别适用于自动驾驶中的多传感器数据融合。
  args:
    lidar_range: *cav_lidar
    supervise_single: true
    m1:
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1

      encoder_args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
  
      aligner_args:
        core_method: identity


    fusion_backbone: 
      resnext: true
      layer_nums: [3, 5, 8]
      layer_strides: [1, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
      anchor_number: *anchor_num

    shrink_header: 
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

    in_head: 256
    anchor_number: *anchor_num
    dir_args: *dir_args


loss:
  core_method: point_pillar_pyramid_loss
  #点柱金字塔损失函数，结合分类、回归、方向和深度等多种损失，适用于点柱网络结构的多任务学习。
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0
    pyramid:
      relative_downsample: [1, 2, 4]
      weight: [0.4, 0.2, 0.1]


optimizer:
  core_method: Adam
  #一种自适应矩估计优化器，能够根据梯度的一阶和二阶矩估计自适应调整学习率，适用于处理稀疏梯度和高噪声的数据。
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  #多步学习率调度器，在训练过程中在预设的步长处减小学习率，以便在训练后期对模型进行更精细的调整和优化。
  gamma: 0.1
  step_size: [15, 25]

